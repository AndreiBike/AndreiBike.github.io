{"version":3,"sources":["components/share/preloader/preloader.svg","components/Redux/actions.js","components/Redux/actionTypes.js","components/share/formatDate.js","components/Date/Date.js","components/share/preloader/Preloader.js","components/TodayImage/TodayImage.js","components/Redux/pictureReducer.js","components/Redux/pictureListReducer.js","components/Redux/sessionSaga.js","components/Redux/reduxStore.js","components/ImagesList/Image/Image.js","components/ImagesList/ImagesList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","uploadTodayPictureAction","payload","type","formatDate","date","dd","getDate","mm","getMonth","getFullYear","DateChooser","connect","state","todayPictureState","dispatch","uploadPicture","props","dataRef","React","createRef","className","defaultValue","onChange","current","value","ref","min","max","Date","Preloader","src","preloadImage","alt","TodayImage","isLoading","mediaType","todayPicture","title","useEffect","width","height","frameBorder","allowFullScreen","initialState","lastDate","pictures","getTodayPictureSaga","getTodayPictureAsync","getPictureSaga","getPictureAsync","takeEvery","getTodayPictureFromInet","a","fetch","response","json","action","call","put","console","log","sagaMiddleware","createSagaMiddleware","persistConfig","key","storage","whitelist","reducers","combineReducers","media_type","hdurl","listPictureState","picture","countDate","setDate","concat","persistedReducer","persistReducer","reduxStore","createStore","applyMiddleware","reduxPersistor","persistStore","run","Image","image","ImagesList","data","pictureList","map","dataLength","length","next","hasMore","loading","App","persistor","reduxPersistStore","store","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.01385404.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/preloader.7db702e9.svg\";","import * as types from './actionTypes';\r\n\r\nexport const uploadTodayPictureAction = (payload) => {\r\n  return ({\r\n    type: types.UPLOAD_TODAY_PICTURE,\r\n    payload\r\n  })\r\n}\r\n\r\nexport const uploadTodayPictureSuccessAction = (payload) =>{\r\n  return({\r\n    type: types.UPLOAD_TODAY_PICTURE_SUCCESS,\r\n    payload\r\n  })\r\n}\r\n\r\nexport const uploadTodayPictureFailedAction = () => {\r\n  return({\r\n    type: types.UPLOAD_TODAY_PICTURE_FAILED,\r\n  })\r\n}\r\n\r\nexport const uploadPictureAction = (payload) => {\r\n  return({\r\n    type: types.UPLOAD_PICTURE,\r\n    payload,\r\n  })\r\n}\r\n\r\nexport const uploadPictureSuccessAction = (payload) => {\r\n  return({\r\n    type: types.UPLOAD_PICTURE_SUCCESS,\r\n    payload,\r\n  })\r\n}\r\n\r\nexport const uploadPictureFailedAction = () => {\r\n  return({\r\n    type: types.UPLOAD_PICTURE_FAILED,\r\n  })\r\n}","export const UPLOAD_TODAY_PICTURE = \"UPLOAD_TODAY_PICTURE\";\r\nexport const UPLOAD_TODAY_PICTURE_SUCCESS = \"UPLOAD_TODAY_PICTURE_SUCCESS\";\r\nexport const UPLOAD_TODAY_PICTURE_FAILED = \"UPLOAD_TODAY_PICTURE_FAILED\"; \r\n\r\nexport const UPLOAD_PICTURE = \"UPLOAD_PICTURE\";\r\nexport const UPLOAD_PICTURE_SUCCESS = \"UPLOAD_PICTURE_SUCCESS\";\r\nexport const UPLOAD_PICTURE_FAILED = \"UPLOAD_PICTURE_FAILED\";","export function formatDate(date) {\r\n  let dd = date.getDate();\r\n  if (dd < 10) dd = '0' + dd;\r\n  let mm = date.getMonth() + 1;\r\n  if (mm < 10) mm = '0' + mm;\r\n  let yy = date.getFullYear();\r\n  return yy + '-' + mm + '-' + dd;\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { uploadTodayPictureAction } from './../Redux/actions';\r\nimport './Date.css';\r\nimport { formatDate } from '../share/formatDate';\r\n\r\nconst DateChooserAPI = (props) => {\r\n\r\n  const dataRef = React.createRef();\r\n\r\n  const dateChanged = () => {\r\n    props.uploadPicture({date: dataRef.current.value});\r\n  }\r\n\r\n  return (\r\n    <div className=\"date\">\r\n      <p>Choose the date</p>\r\n      <div>\r\n        <input defaultValue = {props.date} onChange={dateChanged}   ref={dataRef} type=\"date\" min='1995-06-16' max={formatDate(new Date())} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return ({\r\n    date: state.todayPictureState.date,\r\n  });\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return ({\r\n    uploadPicture: (date) => { dispatch(uploadTodayPictureAction(date)) }\r\n  })\r\n}\r\n\r\nconst DateChooser = connect(mapStateToProps, mapDispatchToProps)(DateChooserAPI);\r\n\r\nexport default DateChooser;","import React from 'react';\r\nimport preloadImage from './preloader.svg';\r\n\r\n\r\nlet Preloader = (props) => {\r\n    return (\r\n        <div className = 'preloader-style'>\r\n            <img src ={preloadImage} alt = 'preloading...'/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preloader;\r\n\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { uploadTodayPictureAction } from './../Redux/actions';\r\nimport { useEffect } from 'react';\r\nimport './TodayImage.css';\r\nimport Preloader from '../share/preloader/Preloader';\r\n\r\nconst TodayImageAPI = (props) => {\r\n\r\n    const {\r\n        isLoading,\r\n        mediaType,\r\n        todayPicture,\r\n        date,\r\n        uploadPicture,\r\n        title,\r\n    } = props;\r\n\r\n    useEffect(() => {\r\n        uploadPicture({ date: date })\r\n    }, []);\r\n\r\n    if(isLoading){\r\n        return(\r\n            <div className = \"today-preloader\">\r\n                <Preloader />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (mediaType === 'video') {\r\n        return (\r\n            <div className=\"today-video\">\r\n                <h1> {title} </h1>\r\n                <iframe title={title} width=\"560\" height=\"315\" frameBorder=\"0\" allowFullScreen  src='https://www.youtube.com/embed/Cd5a5KdPxQc?rel=0' >\r\n                    Your browser doesn't allow iframes\r\n                </iframe>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"today-image\">\r\n            <img src={todayPicture} alt=\"today nasa\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return ({\r\n        isLoading: state.todayPictureState.isLoading,\r\n        mediaType: state.todayPictureState.mediaType,\r\n        todayPicture: state.todayPictureState.todayPicture,\r\n        date: state.todayPictureState.date,\r\n        title: state.todayPictureState.title,\r\n    })\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return ({\r\n        uploadPicture: (date) => { dispatch(uploadTodayPictureAction(date)) }\r\n    })\r\n}\r\n\r\nlet TodayImage = connect(mapStateToProps, mapDispatchToProps)(TodayImageAPI);\r\n\r\nexport default TodayImage;","import * as types from './actionTypes';\r\nimport {formatDate} from './../share/formatDate';\r\n\r\nconst initialState = {\r\n  isLoading: true,\r\n  mediaType: 'image',\r\n  title: '',\r\n  todayPicture: '',\r\n  date: formatDate(new Date()),\r\n}\r\n\r\nexport function pictureReducer(state = initialState, action) {\r\n  switch (action.type) { \r\n\r\n    case types.UPLOAD_TODAY_PICTURE:\r\n      return ({\r\n        ...state,\r\n        isLoading: true,\r\n      })\r\n\r\n    case types.UPLOAD_TODAY_PICTURE_SUCCESS:\r\n      return ({\r\n        mediaType: action.payload.media_type,\r\n        todayPicture: action.payload.hdurl,\r\n        date: action.payload.date,\r\n        title: action.payload.title,\r\n        isLoading: false,\r\n      })\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}","import * as types from './actionTypes';\r\nimport { formatDate } from './../share/formatDate';\r\n\r\nconst initialState = {\r\n  isLoading: false,\r\n  lastDate: formatDate(new Date()),\r\n  pictures: [],\r\n}\r\n\r\nexport function pictureListReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n\r\n    case types.UPLOAD_PICTURE:\r\n      console.log(state);\r\n      return ({\r\n        ...state,\r\n        isLoading: true,\r\n      })\r\n\r\n    case types.UPLOAD_PICTURE_SUCCESS:\r\n      let picture = {\r\n        mediaType: action.payload.media_type,\r\n        todayPicture: action.payload.hdurl,\r\n        date: action.payload.date,\r\n        title: action.payload.title,\r\n      }\r\n      \r\n      let countDate = new Date(state.lastDate);\r\n      countDate.setDate(countDate.getDate()-1);\r\n\r\n      console.log(state.pictures);\r\n\r\n      return({\r\n        isLoading: false,\r\n        lastDate: formatDate(countDate),\r\n        pictures: state.pictures.concat([picture]),\r\n      })\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}","import * as types from './actionTypes';\r\nimport { put, call, takeEvery } from 'redux-saga/effects';\r\nimport {uploadTodayPictureSuccessAction, uploadPictureSuccessAction} from './actions';\r\n\r\nexport function* getTodayPictureSaga() {\r\n  yield takeEvery(types.UPLOAD_TODAY_PICTURE, getTodayPictureAsync);\r\n}\r\n\r\nasync function getTodayPictureFromInet(date) {\r\n  const response = await fetch(`https://api.nasa.gov/planetary/apod?date=${date}&api_key=LmfU3hE27rUYuuuaFvic4ocwNLlgJOwpgTvc40Pn`);\r\n  return response.json();\r\n}\r\n\r\nfunction* getTodayPictureAsync(action) {\r\n  try {\r\n    let response = yield call(()=>getTodayPictureFromInet(action.payload.date));\r\n    yield put(uploadTodayPictureSuccessAction(response))\r\n  } catch{\r\n    console.log(\"Error in saga\");\r\n  }\r\n}\r\n\r\nexport function* getPictureSaga() {\r\n  yield takeEvery(types.UPLOAD_PICTURE, getPictureAsync)\r\n}\r\n\r\nfunction* getPictureAsync(action){\r\n  try{\r\n    let response = yield call(()=>getTodayPictureFromInet(action.payload.date));\r\n    yield put(uploadPictureSuccessAction(response))\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n}","import {createStore, combineReducers, applyMiddleware} from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport {pictureReducer} from './pictureReducer';\r\nimport {pictureListReducer} from './pictureListReducer';\r\nimport {getTodayPictureSaga, getPictureSaga} from './sessionSaga';\r\nimport {persistStore, persistReducer} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\n\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst persistConfig = {\r\n  key: 'pictures',\r\n  storage: storage,\r\n  whitelist: ['todayPictureState'],\r\n}\r\n\r\nconst reducers = combineReducers ({\r\n  todayPictureState: pictureReducer,\r\n  listPictureState: pictureListReducer,\r\n});\r\n\r\nconst persistedReducer = persistReducer(persistConfig, reducers);\r\n\r\nconst reduxStore = createStore(persistedReducer, applyMiddleware(sagaMiddleware));\r\nconst reduxPersistor = persistStore(reduxStore);\r\nsagaMiddleware.run(getTodayPictureSaga);\r\nsagaMiddleware.run(getPictureSaga);\r\n\r\nexport default ()=>{\r\n  return({\r\n    reduxStore,\r\n    reduxPersistor,\r\n  });\r\n};","import React from 'react';\r\nimport './Image.css';\r\n\r\nconst Image = (props) => {\r\n  console.log(props);\r\n  return (\r\n    <div className=\"image\">\r\n      <img src={props.image.todayPicture} alt=\"no pic\" />\r\n      <div>\r\n        {props.image.date}\r\n      </div>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default Image;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Image from './Image/Image';\r\nimport './ImagesList.css';\r\nimport { uploadPictureAction } from '../Redux/actions';\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\n\r\nconst ImagesListAPI = (props) => {\r\n\r\n  const renderImage = (image) => {return <Image  image= {image} />}\r\n  let pictureList = props.pictures.map(renderImage); \r\n\r\n  return (\r\n    <InfiniteScroll\r\n      dataLength={props.pictures.length}\r\n      next={() => props.uploadPicture({ date: props.lastDate })}\r\n      hasMore={(props.lastDate !== '1995-06-16')}\r\n      loading={'Loading'}\r\n    >\r\n      <div className = 'images-list'>\r\n        {pictureList}\r\n       </div>\r\n    </InfiniteScroll>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return ({\r\n    isLoading: state.listPictureState.isLoading,\r\n    pictures: state.listPictureState.pictures,\r\n    lastDate: state.listPictureState.lastDate,\r\n  })\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return ({\r\n    uploadPicture: (data) => { dispatch(uploadPictureAction(data)) }\r\n  })\r\n}\r\n\r\nconst ImagesList = connect(mapStateToProps, mapDispatchToProps)(ImagesListAPI);\r\n\r\nexport default ImagesList;\r\n\r\n","import React from 'react';\nimport DateChooser from './components/Date/Date';\nimport TodayImage from './components/TodayImage/TodayImage';\nimport reduxPersistStore from './components/Redux/reduxStore';\nimport ImagesList from './components/ImagesList/ImagesList'\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nimport './App.css';\nimport { Route } from 'react-router-dom';\n\nfunction App() {\n  return (\n    \n    <PersistGate loading={null} persistor={reduxPersistStore().reduxPersistor}>\n      <Provider store={reduxPersistStore().reduxStore}>\n        <div className=\"App\">\n          <DateChooser />\n          <Route path='/' component = {TodayImage}/>\n          <ImagesList />\n        </div>\n      </Provider>\n    </PersistGate>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}